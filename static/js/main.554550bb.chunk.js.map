{"version":3,"sources":["store/reducers/SelectedUserSlice.ts","store/reducers/TodosSlice.ts","store/reducers/UserSlice.ts","store/store.ts","hooks/hooks.ts","components/TodoList/TodoListFilter/index.tsx","components/TodoList/TodoListItem/index.tsx","components/TodoList/TodoList/index.tsx","components/CurrentUser/index.tsx","App.tsx","index.tsx"],"names":["selectedUserSlice","createSlice","name","initialState","selectedUserId","reducers","selectUser","state","action","payload","clearUser","actions","getAllTodos","createAsyncThunk","_","a","rejectWithValue","axios","get","response","data","todosSlice","todos","isLoading","error","shuffleTodos","sort","Math","random","deleteTodo","filter","id","extraReducers","pending","type","rejected","fulfilled","getUserById","userId","userSlice","user","store","configureStore","reducer","selectedUserReducer","todo","todosReducer","userReducer","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoListFilter","query","onQueryChange","filterOption","onFilterChange","dispatch","className","value","onChange","e","target","onClick","TodoListItem","memo","title","completed","isSelected","onUserSelect","onTodoDelete","classnames","htmlFor","checked","readOnly","TodoList","useState","filterQuery","setFilterQuery","filterBy","setFilterBy","handleUserSelect","useCallback","handleTodoDelete","todoId","filteredTodos","toLowerCase","includes","useEffect","length","map","CurrentUser","email","phone","App","Root","StrictMode","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.554550bb.chunk.js","sourcesContent":["/* eslint-disable no-param-reassign */\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\ntype SelectedUserState = {\n  selectedUserId: number | null;\n};\n\nconst initialState: SelectedUserState = {\n  selectedUserId: null,\n};\n\nconst selectedUserSlice = createSlice({\n  name: 'selectedUser',\n  initialState,\n  reducers: {\n    selectUser(state, action: PayloadAction<number>) {\n      state.selectedUserId = action.payload;\n    },\n    clearUser(state) {\n      state.selectedUserId = null;\n    },\n  },\n});\n\nexport const { selectUser, clearUser } = selectedUserSlice.actions;\nexport default selectedUserSlice.reducer;\n","/* eslint-disable no-param-reassign */\nimport { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport { ITodo } from '../../models/ITodo';\n\ntype TodosState = {\n  todos: ITodo[];\n  isLoading: boolean;\n  error: string;\n};\n\nconst initialState: TodosState = {\n  todos: [],\n  isLoading: false,\n  error: '',\n};\n\nexport const getAllTodos = createAsyncThunk(\n  'todos/getAll',\n  async (_, { rejectWithValue }) => {\n    try {\n      const response = await axios.get<ITodo[]>('https://mate.academy/students-api/todos');\n\n      return response.data;\n    } catch (e) {\n      return rejectWithValue('Sorry, seems like our servers are on 🔥. Try again');\n    }\n  },\n);\n\nconst todosSlice = createSlice({\n  name: 'todos',\n  initialState,\n  reducers: {\n    shuffleTodos(state) {\n      state.todos.sort(() => 0.5 - Math.random());\n    },\n    deleteTodo(state, { payload }: PayloadAction<number>) {\n      state.todos = state.todos.filter(({ id }) => id !== payload);\n    },\n  },\n  extraReducers: {\n    [getAllTodos.pending.type]: (state) => {\n      state.isLoading = true;\n      state.error = '';\n    },\n    [getAllTodos.rejected.type]: (state, action: PayloadAction<string>) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n    [getAllTodos.fulfilled.type]: (state, action: PayloadAction<ITodo[]>) => {\n      state.isLoading = false;\n      state.error = '';\n      state.todos = action.payload;\n    },\n  },\n});\n\nexport const { shuffleTodos, deleteTodo } = todosSlice.actions;\nexport default todosSlice.reducer;\n","/* eslint-disable no-param-reassign */\nimport { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport { IUser } from '../../models/IUser';\n\ntype UserState = {\n  user: IUser;\n  isLoading: boolean;\n  error: string;\n};\n\nconst initialState: UserState = {\n  user: {} as IUser,\n  isLoading: false,\n  error: '',\n};\n\nexport const getUserById = createAsyncThunk(\n  'users/getById',\n  async (userId: number, { rejectWithValue }) => {\n    try {\n      const response = await axios.get<IUser>(`https://mate.academy/students-api/users/${userId}`);\n\n      if (!response.data) {\n        return rejectWithValue('User not found 🤷‍♂️');\n      }\n\n      return response.data;\n    } catch (e) {\n      return rejectWithValue('Failed to load user. 😒');\n    }\n  },\n);\n\nconst userSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [getUserById.pending.type]: (state) => {\n      state.isLoading = true;\n      state.error = '';\n    },\n    [getUserById.rejected.type]: (state, action: PayloadAction<string>) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n    [getUserById.fulfilled.type]: (state, action: PayloadAction<IUser>) => {\n      state.isLoading = false;\n      state.error = '';\n      state.user = action.payload;\n    },\n  },\n});\n\nexport default userSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport selectedUserReducer from './reducers/SelectedUserSlice';\nimport todosReducer from './reducers/TodosSlice';\nimport userReducer from './reducers/UserSlice';\n\nexport const store = configureStore({\n  reducer: {\n    selectedUserId: selectedUserReducer,\n    todo: todosReducer,\n    user: userReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from '../store/store';\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { FC } from 'react';\nimport { useAppDispatch } from '../../../hooks/hooks';\nimport { shuffleTodos } from '../../../store/reducers/TodosSlice';\n\ntype TodoListFilterProps = {\n  query: string;\n  onQueryChange: (value: string) => void;\n  filterOption: string;\n  onFilterChange: (value: string) => void;\n};\n\nconst TodoListFilter: FC<TodoListFilterProps> = ({\n  query,\n  onQueryChange,\n  filterOption,\n  onFilterChange,\n}) => {\n  const dispatch = useAppDispatch();\n\n  return (\n    <div className=\"TodoList__filter\">\n      <input\n        type=\"text\"\n        value={query}\n        onChange={(e) => onQueryChange(e.target.value)}\n      />\n      <select\n        value={filterOption}\n        onChange={(e) => onFilterChange(e.target.value)}\n      >\n        <option value=\"all\">All</option>\n        <option value=\"active\">Active</option>\n        <option value=\"completed\">Completed</option>\n      </select>\n      <button\n        type=\"button\"\n        onClick={() => dispatch(shuffleTodos())}\n      >\n        Shuffle todos\n      </button>\n    </div>\n  );\n};\n\nexport default TodoListFilter;\n","import { FC, memo } from 'react';\nimport classnames from 'classnames';\nimport { ITodo } from '../../../models/ITodo';\n\ntype TodoListItemProps = {\n  todo: ITodo;\n  isSelected: boolean;\n  onUserSelect: (userId: number) => void;\n  onTodoDelete: (todoId: number) => void;\n};\n\nconst TodoListItem: FC<TodoListItemProps> = memo(\n  ({\n    todo: {\n      id, userId, title, completed,\n    },\n    isSelected,\n    onUserSelect,\n    onTodoDelete,\n  }) => (\n    <li\n      className={classnames(\n        'TodoList__item',\n        {\n          'TodoList__item--unchecked': !completed,\n          'TodoList__item--checked': completed,\n        },\n      )}\n    >\n      <label htmlFor={`${id}`}>\n        <input\n          type=\"checkbox\"\n          checked={completed}\n          readOnly\n          id={`${id}`}\n        />\n        <p>{title}</p>\n      </label>\n      <div>\n        <button\n          className=\"TodoList__user-button button\"\n          type=\"button\"\n          onClick={() => onTodoDelete(id)}\n        >\n          Delete Todo\n        </button>\n        <button\n          className={classnames(\n            'TodoList__user-button',\n            'button',\n            {\n              'TodoList__user-button--selected': isSelected,\n            },\n          )}\n          type=\"button\"\n          onClick={() => onUserSelect(userId)}\n        >\n          {`User ${userId}`}\n        </button>\n      </div>\n    </li>\n  ),\n);\n\nexport default TodoListItem;\n","import {\n  FC, useCallback, useEffect, useState,\n} from 'react';\nimport { useAppDispatch, useAppSelector } from '../../../hooks/hooks';\nimport { selectUser } from '../../../store/reducers/SelectedUserSlice';\nimport { deleteTodo, getAllTodos } from '../../../store/reducers/TodosSlice';\nimport TodoListFilter from '../TodoListFilter';\nimport TodoListItem from '../TodoListItem';\nimport './TodoList.scss';\n\ntype TodoListProps = {};\n\nconst TodoList: FC<TodoListProps> = () => {\n  const [filterQuery, setFilterQuery] = useState('');\n  const [filterBy, setFilterBy] = useState<string>('all');\n  const dispatch = useAppDispatch();\n  const {\n    todo: {\n      todos, isLoading, error,\n    },\n    selectedUserId: {\n      selectedUserId,\n    },\n  } = useAppSelector(state => state);\n\n  const handleUserSelect = useCallback((userId: number) => {\n    dispatch(selectUser(userId));\n  }, []);\n\n  const handleTodoDelete = useCallback((todoId: number) => {\n    dispatch(deleteTodo(todoId));\n  }, []);\n\n  const filteredTodos = todos\n    .filter(todo => {\n      switch (filterBy) {\n        case 'active':\n          return !todo.completed;\n\n        case 'completed':\n          return todo.completed;\n\n        default:\n          return todo;\n      }\n    })\n    .filter(({ title }) => {\n      return title.toLowerCase().includes(filterQuery.toLowerCase());\n    });\n\n  useEffect(() => {\n    dispatch(getAllTodos());\n  }, []);\n\n  // Should create common error block to render instead\n  // Same with Loading\n  if (error) {\n    return (\n      <p>{error}</p>\n    );\n  }\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      {isLoading ? (\n        <p>Loading...</p>\n      ) : (\n        <div className=\"TodoList__list-container\">\n          <TodoListFilter\n            query={filterQuery}\n            onQueryChange={setFilterQuery}\n            filterOption={filterBy}\n            onFilterChange={setFilterBy}\n          />\n          <ul className=\"TodoList__list\">\n            {todos.length && filteredTodos.map(todo => (\n              <TodoListItem\n                key={todo.id}\n                todo={todo}\n                isSelected={selectedUserId === todo.userId}\n                onUserSelect={handleUserSelect}\n                onTodoDelete={handleTodoDelete}\n              />\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TodoList;\n","import { FC, useEffect } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../hooks/hooks';\nimport { clearUser } from '../../store/reducers/SelectedUserSlice';\nimport { getUserById } from '../../store/reducers/UserSlice';\n\nimport './CurrentUser.scss';\n\ntype CurrentUserProps = {};\n\nexport const CurrentUser: FC<CurrentUserProps> = () => {\n  const { user, error, isLoading } = useAppSelector(state => state.user);\n  const { selectedUserId } = useAppSelector(state => state.selectedUserId);\n\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    if (selectedUserId) {\n      dispatch(getUserById(selectedUserId));\n    }\n  }, [selectedUserId]);\n\n  if (error) {\n    return <p>{error}</p>;\n  }\n\n  if (isLoading) {\n    return <p>Loading...</p>;\n  }\n\n  return (\n    <div className=\"CurrentUser\">\n      {\n        selectedUserId ? (\n          <>\n            <h2 className=\"CurrentUser__title\"><span>{`Selected user: ${user.id}`}</span></h2>\n            <h3 className=\"CurrentUser__name\">{user.name}</h3>\n            <p className=\"CurrentUser__email\">{user.email}</p>\n            <p className=\"CurrentUser__phone\">{user.phone}</p>\n            <button\n              className=\"CurrentUser__clear button\"\n              onClick={() => dispatch(clearUser())}\n              type=\"button\"\n            >\n              Clear selected user\n            </button>\n          </>\n        ) : (\n          <h2 className=\"CurrentUser__title\">\n            <span>Select user</span>\n          </h2>\n        )\n      }\n    </div>\n  );\n};\n","import TodoList from './components/TodoList/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport './App.scss';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          <CurrentUser />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './store/store';\nimport './styles/general.scss';\n\nimport App from './App';\n\nconst Root = () => (\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}